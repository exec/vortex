#!/bin/bash
# 🔍 VORTEX PROJECT DISCOVERY ENGINE
# 
# Automatically scans project directories and detects services
# Maps directory structure to VM configurations
# Generates vortex.yaml workspace configuration

# ANSI colors
RESET='\033[0m'
BOLD='\033[1m'
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
BLUE='\033[34m'
MAGENTA='\033[35m'
CYAN='\033[36m'
WHITE='\033[37m'
BRIGHT_GREEN='\033[92m'
BRIGHT_BLUE='\033[94m'
BRIGHT_MAGENTA='\033[95m'
BRIGHT_CYAN='\033[96m'
BRIGHT_YELLOW='\033[93m'

print_header() {
    echo -e "${BRIGHT_MAGENTA}🔍 Vortex Discovery • ${BOLD}$1${RESET}"
    echo -e "${MAGENTA}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${RESET}"
}

print_tip() {
    echo -e "${CYAN}💡 Tip:${RESET} $1"
}

print_error() {
    echo -e "${RED}❌ Error:${RESET} $1" >&2
}

print_success() {
    echo -e "${GREEN}✅ $1${RESET}"
}

print_info() {
    echo -e "${BLUE}🔗 $1${RESET}"
}

print_discovery() {
    echo -e "${BRIGHT_CYAN}🔍 $1${RESET}"
}

detect_language() {
    local dir="$1"
    
    # Node.js detection
    if [[ -f "$dir/package.json" ]]; then
        echo "node"
    # Python detection  
    elif [[ -f "$dir/requirements.txt" || -f "$dir/pyproject.toml" || -f "$dir/setup.py" ]]; then
        echo "python"
    # Go detection
    elif [[ -f "$dir/go.mod" || -f "$dir/go.sum" ]]; then
        echo "go"
    # Rust detection
    elif [[ -f "$dir/Cargo.toml" ]]; then
        echo "rust"
    # Java detection
    elif [[ -f "$dir/pom.xml" || -f "$dir/build.gradle" ]]; then
        echo "java"
    # PHP detection
    elif [[ -f "$dir/composer.json" ]]; then
        echo "php"
    # Ruby detection
    elif [[ -f "$dir/Gemfile" ]]; then
        echo "ruby"
    # C# detection
    elif find "$dir" -maxdepth 1 -name "*.csproj" 2>/dev/null | grep -q .; then
        echo "csharp"
    # Docker detection
    elif [[ -f "$dir/Dockerfile" ]]; then
        echo "docker"
    else
        echo ""
    fi
}

detect_service_type() {
    local dir="$1"
    local dirname=$(basename "$dir")
    
    # Check for special directory patterns in the directory
    if [[ -d "$dir/src" || -d "$dir/public" || -d "$dir/static" || -d "$dir/assets" ]]; then
        echo "frontend"
    elif [[ -d "$dir/api" || -d "$dir/server" || -d "$dir/backend" ]]; then
        echo "backend"
    elif [[ -d "$dir/migrations" || -d "$dir/schemas" || -d "$dir/sql" ]]; then
        echo "database"
    elif [[ "$dirname" == *"redis"* || "$dirname" == *"cache"* ]]; then
        echo "cache"
    elif [[ "$dirname" == *"worker"* || "$dirname" == *"job"* || "$dirname" == *"task"* ]]; then
        echo "worker"
    elif [[ "$dirname" == *"queue"* || "$dirname" == *"broker"* || "$dirname" == *"message"* ]]; then
        echo "queue"
    # Check directory name patterns
    elif [[ "$dirname" == "frontend" || "$dirname" == "ui" || "$dirname" == "web" || "$dirname" == "client" || "$dirname" == "app" ]]; then
        echo "frontend"
    elif [[ "$dirname" == "backend" || "$dirname" == "api" || "$dirname" == "server" || "$dirname" == "service" ]]; then
        echo "backend"
    elif [[ "$dirname" == "database" || "$dirname" == "db" || "$dirname" == "data" ]]; then
        echo "database"
    elif [[ "$dirname" == "cache" || "$dirname" == "redis" || "$dirname" == "memcached" ]]; then
        echo "cache"
    elif [[ "$dirname" == "worker" || "$dirname" == "workers" || "$dirname" == "jobs" || "$dirname" == "tasks" ]]; then
        echo "worker"
    elif [[ "$dirname" == "queue" || "$dirname" == "broker" || "$dirname" == *"message"* ]]; then
        echo "queue"
    else
        echo "service"
    fi
}

get_suggested_ports() {
    local language="$1"
    local service_type="$2"
    
    # Override based on service type
    case "$service_type" in
        frontend)
            echo "3000,3001"
            ;;
        backend|api)
            echo "8000,8001"
            ;;
        database)
            echo "5432"
            ;;
        cache)
            echo "6379"
            ;;
        queue)
            echo "4222,8222"
            ;;
        *)
            case "$language" in
                node) echo "3000,3001" ;;
                python) echo "8000,8001" ;;
                go) echo "8080,8081" ;;
                rust) echo "8080" ;;
                java) echo "8080,8090" ;;
                php) echo "9000" ;;
                ruby) echo "3000" ;;
                csharp) echo "5000,5001" ;;
                docker) echo "80,8080" ;;
                *) echo "8080" ;;
            esac
            ;;
    esac
}

get_suggested_image() {
    local language="$1"
    local service_type="$2"
    
    # Override based on service type
    case "$service_type" in
        database)
            echo "postgres:15-alpine"
            ;;
        cache)
            echo "redis:7-alpine"
            ;;
        queue)
            echo "nats:2.9-alpine"
            ;;
        *)
            case "$language" in
                node) echo "node:18-alpine" ;;
                python) echo "python:3.11-slim" ;;
                go) echo "golang:1.21-alpine" ;;
                rust) echo "rust:1.70" ;;
                java) echo "openjdk:17-alpine" ;;
                php) echo "php:8.2-fpm-alpine" ;;
                ruby) echo "ruby:3.2-alpine" ;;
                csharp) echo "mcr.microsoft.com/dotnet/aspnet:7.0" ;;
                docker) echo "custom" ;;
                *) echo "ubuntu:22.04" ;;
            esac
            ;;
    esac
}

get_service_emoji() {
    local service_type="$1"
    local language="$2"
    
    case "$service_type" in
        frontend) echo "⚛️" ;;
        backend|api) echo "🐍" ;;
        database) echo "🐘" ;;
        cache) echo "🔴" ;;
        worker) echo "⚙️" ;;
        queue) echo "📡" ;;
        *)
            case "$language" in
                node) echo "📦" ;;
                python) echo "🐍" ;;
                go) echo "🔵" ;;
                rust) echo "🦀" ;;
                java) echo "☕" ;;
                php) echo "🐘" ;;
                ruby) echo "💎" ;;
                csharp) echo "🔷" ;;
                docker) echo "🐳" ;;
                *) echo "⚙️" ;;
            esac
            ;;
    esac
}

scan_directory() {
    local project_dir="${1:-.}"
    
    if [[ ! -d "$project_dir" ]]; then
        print_error "Directory does not exist: $project_dir"
        return 1
    fi
    
    echo
    print_header "Project Discovery"
    
    echo -e "${WHITE}Scanning project directory:${RESET} ${BRIGHT_CYAN}$(realpath "$project_dir")${RESET}"
    echo
    
    print_discovery "Analyzing directory structure..."
    
    local services=()
    local service_count=0
    
    # Look for subdirectories that could be services
    for dir in "$project_dir"/*; do
        if [[ ! -d "$dir" ]]; then
            continue
        fi
        
        local dirname=$(basename "$dir")
        
        # Skip common non-service directories
        case "$dirname" in
            node_modules|__pycache__|.git|.svn|.hg|target|build|dist|.vscode|.idea|*.egg-info)
                continue
                ;;
        esac
        
        # Skip hidden directories
        if [[ "$dirname" =~ ^\. ]]; then
            continue
        fi
        
        # Skip if directory is empty or has no relevant files
        if [[ ! "$(find "$dir" -maxdepth 2 -type f | head -1)" ]]; then
            continue
        fi
        
        local language=$(detect_language "$dir")
        local service_type=$(detect_service_type "$dir")
        
        # Skip if no language detected and not a special service type
        if [[ -z "$language" && "$service_type" == "service" ]]; then
            continue
        fi
        
        local ports=$(get_suggested_ports "$language" "$service_type")
        local image=$(get_suggested_image "$language" "$service_type")
        local emoji=$(get_service_emoji "$service_type" "$language")
        
        ((service_count++))
        
        echo -e "${BRIGHT_BLUE}$service_count. $emoji ${BRIGHT_GREEN}$dirname${RESET} ${WHITE}→ ${CYAN}$service_type${RESET}"
        echo -e "   ${WHITE}Language:${RESET} ${YELLOW}${language:-"detected by structure"}${RESET}"
        echo -e "   ${WHITE}Image:${RESET} ${CYAN}$image${RESET}"
        echo -e "   ${WHITE}Ports:${RESET} ${GREEN}$ports${RESET}"
        
        # Store service information (using newline separator for compatibility)
        services+=("$dirname|$service_type|$language|$image|$ports|$emoji")
        
        echo
    done
    
    if [[ $service_count -eq 0 ]]; then
        print_error "No services detected in directory"
        echo
        print_tip "Try scanning a directory with subdirectories containing package.json, requirements.txt, etc."
        return 1
    fi
    
    print_success "Discovered $service_count potential services"
    
    # Generate workspace configuration
    generate_workspace_config "$project_dir" "${services[@]}"
}

generate_workspace_config() {
    local project_dir="$1"
    shift
    local services=("$@")
    
    local project_name=$(basename "$(realpath "$project_dir")")
    local config_file="$project_dir/vortex.yaml"
    
    echo
    print_info "Generating workspace configuration..."
    
    cat > "$config_file" << EOF
# 🔥 Vortex Workspace Configuration
# Generated by Vortex Discovery Engine

name: $project_name
description: Auto-discovered multi-service workspace

# Development context (default)
context: dev

# Service definitions
services:
EOF
    
    for service_info in "${services[@]}"; do
        IFS='|' read -r name service_type language image ports emoji <<< "$service_info"
        
        cat >> "$config_file" << EOF
  $name:
    type: $service_type
    directory: ./$name
    image: $image
    language: $language
    ports:
EOF
        
        IFS=',' read -ra port_array <<< "$ports"
        for port in "${port_array[@]}"; do
            echo "      - $port:$port" >> "$config_file"
        done
        
        cat >> "$config_file" << EOF
    environment: {}
    volumes:
      - ./$name:/app
    # emoji: $emoji
    
EOF
    done
    
    cat >> "$config_file" << EOF
# Network configuration
network:
  name: vortex-$project_name
  driver: bridge

# Context configurations
contexts:
  dev:
    description: Development environment with debugging and hot reload
    environment:
      DEBUG: "true"
      NODE_ENV: development
      FLASK_ENV: development
      GO_ENV: development
    
  staging:
    description: Staging environment for testing
    environment:
      NODE_ENV: staging
      FLASK_ENV: staging
      GO_ENV: staging
    
  prod:
    description: Production environment optimized for performance
    environment:
      NODE_ENV: production
      FLASK_ENV: production
      GO_ENV: production

# Generated by Vortex Discovery Engine v1.0
# To deploy: vortex workspace create --config vortex.yaml
EOF
    
    print_success "Configuration saved to: $config_file"
    echo
    
    # Show configuration preview
    echo -e "${WHITE}📋 Configuration Preview:${RESET}"
    echo -e "${BRIGHT_BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${RESET}"
    
    # Show services section
    for service_info in "${services[@]}"; do
        IFS='|' read -r name service_type language image ports emoji <<< "$service_info"
        echo -e "${WHITE}$emoji $name:${RESET}"
        echo -e "  ${CYAN}Type:${RESET} $service_type"
        echo -e "  ${CYAN}Language:${RESET} ${language:-"auto-detected"}"
        echo -e "  ${CYAN}Image:${RESET} $image"
        echo -e "  ${CYAN}Ports:${RESET} $ports"
        echo
    done
    
    echo -e "${BRIGHT_BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${RESET}"
    echo
    
    print_tip "Review and edit $config_file, then run:"
    echo -e "  ${BRIGHT_BLUE}vortex workspace create --config vortex.yaml${RESET}"
    echo -e "  ${BRIGHT_BLUE}vortex context switch staging${RESET}"
    echo
}

validate_config() {
    local config_file="${1:-vortex.yaml}"
    
    if [[ ! -f "$config_file" ]]; then
        print_error "Configuration file not found: $config_file"
        return 1
    fi
    
    echo
    print_header "Configuration Validation"
    
    print_success "Configuration file exists: $config_file"
    
    # Basic YAML syntax validation (simplified)
    if command -v yq >/dev/null 2>&1; then
        if yq eval '.' "$config_file" >/dev/null 2>&1; then
            print_success "YAML syntax is valid"
        else
            print_error "YAML syntax errors detected"
            return 1
        fi
        
        # Validate required fields
        local name
        name=$(yq eval '.name' "$config_file" 2>/dev/null)
        if [[ "$name" == "null" || -z "$name" ]]; then
            print_error "Missing required field: name"
            return 1
        fi
        
        print_success "Configuration validation passed"
    else
        print_info "Install 'yq' for advanced YAML validation"
    fi
    
    echo
}

show_help() {
    echo
    print_header "Vortex Discovery Help"
    
    echo -e "${BOLD}Commands:${RESET}"
    echo -e "  ${BRIGHT_BLUE}scan${RESET} [directory]     Scan directory and generate workspace config"
    echo -e "  ${BRIGHT_BLUE}validate${RESET} [config]    Validate vortex.yaml configuration"
    echo -e "  ${BRIGHT_BLUE}help${RESET}                 Show this help"
    
    echo
    echo -e "${BOLD}Examples:${RESET}"
    echo -e "  ${CYAN}./vortex_discovery scan .${RESET}"
    echo -e "  ${CYAN}./vortex_discovery scan ~/my-project${RESET}"
    echo -e "  ${CYAN}./vortex_discovery validate vortex.yaml${RESET}"
    
    echo
    echo -e "${BOLD}Supported Languages:${RESET}"
    echo -e "  📦 ${BRIGHT_GREEN}node${RESET} - detected by: ${YELLOW}package.json${RESET}"
    echo -e "  🐍 ${BRIGHT_GREEN}python${RESET} - detected by: ${YELLOW}requirements.txt, pyproject.toml, setup.py${RESET}"
    echo -e "  🔵 ${BRIGHT_GREEN}go${RESET} - detected by: ${YELLOW}go.mod, go.sum${RESET}"
    echo -e "  🦀 ${BRIGHT_GREEN}rust${RESET} - detected by: ${YELLOW}Cargo.toml${RESET}"
    echo -e "  ☕ ${BRIGHT_GREEN}java${RESET} - detected by: ${YELLOW}pom.xml, build.gradle${RESET}"
    echo -e "  🐘 ${BRIGHT_GREEN}php${RESET} - detected by: ${YELLOW}composer.json${RESET}"
    echo -e "  💎 ${BRIGHT_GREEN}ruby${RESET} - detected by: ${YELLOW}Gemfile${RESET}"
    echo -e "  🔷 ${BRIGHT_GREEN}csharp${RESET} - detected by: ${YELLOW}*.csproj${RESET}"
    echo -e "  🐳 ${BRIGHT_GREEN}docker${RESET} - detected by: ${YELLOW}Dockerfile${RESET}"
    
    echo
    print_tip "Generated vortex.yaml can be used with: vortex workspace create --config vortex.yaml"
    echo
}

# Main command router
case "${1:-scan}" in
    scan)
        scan_directory "$2"
        ;;
    validate)
        validate_config "$2"
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo "Unknown command: $1"
        show_help
        exit 1
        ;;
esac